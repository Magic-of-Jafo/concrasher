@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

.skip-link {
  position: absolute;
  top: -40px;
  left: 0;
  background: #000;
  color: #fff;
  padding: 8px 16px;
  z-index: 1000;
  transition: top 0.3s;
}

.skip-link:focus {
  top: 0;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

/* Prevent layout shifts */
* {
  box-sizing: border-box;
}

/* Ensure images don't cause layout shifts */
img {
  max-width: 100%;
  height: auto;
}

/* Prevent iframe layout shifts */
iframe {
  max-width: 100%;
}

/* Font loading optimization */
.font-display-swap {
  font-display: swap;
}

/* Reduce layout shift for dynamic content */
.layout-shift-guard {
  min-height: 1px;
  min-width: 1px;
}

a {
  color: inherit;
  text-decoration: none;
}

/* 
  This is a workaround for detecting browser autofill.
  Browsers that support autofill will trigger an animation on the input.
  We can listen for this animation event in our components to react to autofill.
*/
@keyframes on-autofill-start {
  from {}

  to {}
}

@keyframes on-autofill-cancel {
  from {}

  to {}
}

input:-webkit-autofill {
  animation-name: on-autofill-start;
  animation-fill-mode: both;
}

input:not(:-webkit-autofill) {
  animation-name: on-autofill-cancel;
  animation-fill-mode: both;
}
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Timezone {
  id                 String              @id @default(cuid())
  ianaId             String              @unique
  value              String?
  abbr               String?
  offset             Int?
  isdst              Boolean?
  text               String?
  utcAliases         String[]
  conventions        Convention[]
  conventionSettings ConventionSetting[]
  users              User[]
}

model User {
  id               String             @id @default(cuid())
  email            String             @unique
  emailVerified    DateTime?
  image            String?
  hashedPassword   String?
  roles            Role[]             @default([USER])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  bio              String?
  resetToken       String?            @unique
  resetTokenExpiry DateTime?
  timezoneId       String?
  firstName        String?
  lastName         String?
  stageName        String?
  useStageNamePublicly Boolean?        @default(false)
  accounts         Account[]
  ownedBrands      Brand[]            @relation("BrandOwner")
  brandMemberships BrandUser[]
  conventionSeries ConventionSeries[]
  roleApplications RoleApplication[]
  sessions         Session[]
  talentProfile    TalentProfile?
  timezone         Timezone?          @relation(fields: [timezoneId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RoleApplication {
  id            String            @id @default(cuid())
  userId        String
  requestedRole RequestedRole
  status        ApplicationStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, requestedRole])
}

model ConventionSeries {
  id              String       @id @default(cuid())
  name            String
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  organizerUserId String
  logoUrl         String?
  slug            String       @unique
  conventions     Convention[]
  organizer       User         @relation(fields: [organizerUserId], references: [id])
}

model PriceTier {
  id             String          @id @default(cuid())
  conventionId   String
  label          String
  amount         Decimal
  order          Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  priceDiscounts PriceDiscount[]
  convention     Convention      @relation(fields: [conventionId], references: [id], onDelete: Cascade)
}

model PriceDiscount {
  id               String     @id @default(cuid())
  conventionId     String
  cutoffDate       DateTime
  priceTierId      String
  discountedAmount Decimal
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  convention       Convention @relation(fields: [conventionId], references: [id], onDelete: Cascade)
  priceTier        PriceTier  @relation(fields: [priceTierId], references: [id], onDelete: Cascade)

  @@unique([conventionId, priceTierId, cutoffDate])
}

model Convention {
  id                       String                   @id @default(cuid())
  name                     String
  slug                     String                   @unique
  startDate                DateTime?
  endDate                  DateTime?
  city                     String?
  country                  String?
  venueName                String?
  websiteUrl               String?
  status                   ConventionStatus         @default(DRAFT)
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt
  stateAbbreviation        String?
  stateName                String?
  seriesId                 String?
  deletedAt                DateTime?
  coverImageUrl            String?
  descriptionMain          String?
  descriptionShort         String?
  isOneDayEvent            Boolean                  @default(false)
  isTBD                    Boolean                  @default(false)
  profileImageUrl          String?
  guestsStayAtPrimaryVenue Boolean?                 @default(false)
  registrationUrl          String?
  timezoneId               String?
  keywords                 String[]
  series                   ConventionSeries?        @relation(fields: [seriesId], references: [id])
  timezone                 Timezone?                @relation(fields: [timezoneId], references: [id])
  dealerLinks              ConventionDealerLink[]
  media                    ConventionMedia[]
  scheduleItems            ConventionScheduleItem[]
  settings                 ConventionSetting[]
  talent                   ConventionTalent[]
  hotels                   Hotel[]
  priceDiscounts           PriceDiscount[]
  priceTiers               PriceTier[]
  scheduleDays             ScheduleDay[]
  venues                   Venue[]
  tags                     Tag[]                    @relation("ConventionTags")
}

model SiteSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SEOSetting {
  id                String   @id @default("singleton")
  defaultKeywords   String[] @default([])
  siteTitleTemplate String?
  siteDescription   String?
  organizationName  String?
  organizationUrl   String?
  organizationLogo  String?
  socialProfiles    String[] @default([])
  trackingScripts   String?
  updatedAt         DateTime @updatedAt
}

model ConventionSetting {
  id           String     @id @default(cuid())
  conventionId String
  key          String
  value        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  timezoneId   String?
  currencyId   Int?
  convention   Convention @relation(fields: [conventionId], references: [id], onDelete: Cascade)
  currency     Currency?  @relation(fields: [currencyId], references: [id])
  timezone     Timezone?  @relation(fields: [timezoneId], references: [id])

  @@unique([conventionId, key])
}

model Venue {
  id                        String                   @id @default(uuid())
  conventionId              String
  isPrimaryVenue            Boolean                  @default(false)
  venueName                 String
  description               String?
  websiteUrl                String?
  googleMapsUrl             String?
  streetAddress             String?
  city                      String?
  stateRegion               String?
  postalCode                String?
  country                   String?
  contactEmail              String?
  contactPhone              String?
  amenities                 String[]
  parkingInfo               String?
  publicTransportInfo       String?
  overallAccessibilityNotes String?
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  scheduleItems             ConventionScheduleItem[]
  convention                Convention               @relation(fields: [conventionId], references: [id], onDelete: Cascade)
  photos                    VenuePhoto[]
}

model VenuePhoto {
  id        String   @id @default(uuid())
  venueId   String
  url       String
  caption   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  venue     Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
}

model Hotel {
  id                        String       @id @default(uuid())
  conventionId              String
  isPrimaryHotel            Boolean      @default(false)
  isAtPrimaryVenueLocation  Boolean      @default(false)
  hotelName                 String
  description               String?
  websiteUrl                String?
  googleMapsUrl             String?
  streetAddress             String?
  city                      String?
  stateRegion               String?
  postalCode                String?
  country                   String?
  contactEmail              String?
  contactPhone              String?
  groupRateOrBookingCode    String?
  groupPrice                String?
  bookingLink               String?
  bookingCutoffDate         DateTime?
  amenities                 String[]
  parkingInfo               String?
  publicTransportInfo       String?
  overallAccessibilityNotes String?
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt
  convention                Convention   @relation(fields: [conventionId], references: [id], onDelete: Cascade)
  photos                    HotelPhoto[]
}

model HotelPhoto {
  id        String   @id @default(uuid())
  hotelId   String
  url       String
  caption   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
}

model ScheduleDay {
  id           String                   @id @default(cuid())
  conventionId String
  dayOffset    Int
  isOfficial   Boolean
  label        String?
  events       ConventionScheduleItem[]
  convention   Convention               @relation(fields: [conventionId], references: [id], onDelete: Cascade)
}

model ConventionScheduleItem {
  id               String                    @id @default(cuid())
  conventionId     String
  title            String
  description      String?
  locationName     String?
  venueId          String?
  order            Int?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  eventType        String
  atPrimaryVenue   Boolean
  dayOffset        Int?
  durationMinutes  Int?
  startTimeMinutes Int?
  scheduleDayId    String?
  convention       Convention                @relation(fields: [conventionId], references: [id], onDelete: Cascade)
  scheduleDay      ScheduleDay?              @relation(fields: [scheduleDayId], references: [id])
  venue            Venue?                    @relation(fields: [venueId], references: [id])
  brandLinks       ScheduleEventBrandLink[]
  feeTiers         ScheduleEventFeeTier[]
  talentLinks      ScheduleEventTalentLink[]
}

model ScheduleEventFeeTier {
  id             String                 @id @default(cuid())
  scheduleItemId String
  label          String
  amount         Decimal
  scheduleItem   ConventionScheduleItem @relation(fields: [scheduleItemId], references: [id], onDelete: Cascade)
}

model ScheduleEventTalentLink {
  id              String                 @id @default(cuid())
  scheduleItemId  String
  talentProfileId String
  scheduleItem    ConventionScheduleItem @relation(fields: [scheduleItemId], references: [id], onDelete: Cascade)
}

model ScheduleEventBrandLink {
  id             String                 @id @default(cuid())
  scheduleItemId String
  brandProfileId String
  scheduleItem   ConventionScheduleItem @relation(fields: [scheduleItemId], references: [id], onDelete: Cascade)
}

model Brand {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  logoUrl     String?
  websiteUrl  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  ownerId     String
  owner       User        @relation("BrandOwner", fields: [ownerId], references: [id])
  members     BrandUser[]
}

model BrandUser {
  brandId String
  userId  String
  role    BrandUserRole
  brand   Brand         @relation(fields: [brandId], references: [id], onDelete: Cascade)
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([brandId, userId])
}

model ConventionMedia {
  id           String     @id @default(cuid())
  conventionId String
  type         MediaType
  url          String
  caption      String?
  order        Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  convention   Convention @relation(fields: [conventionId], references: [id], onDelete: Cascade)
}

model ConventionDealerLink {
  id                  String      @id @default(cuid())
  conventionId        String
  profileType         ProfileType
  linkedProfileId     String
  displayNameOverride String?
  descriptionOverride String?
  order               Int
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  convention          Convention  @relation(fields: [conventionId], references: [id], onDelete: Cascade)

  @@unique([conventionId, profileType, linkedProfileId])
  @@index([conventionId])
}

model Country {
  id          Int    @id @default(autoincrement())
  name        String @unique
  alpha2      String @unique @map("alpha_2")
  countryCode String @unique @map("country_code")
}

model State {
  id           Int    @id @default(autoincrement())
  name         String @unique
  abbreviation String @unique
}

model Currency {
  id                 Int                 @id @default(autoincrement())
  code               String              @unique
  name               String
  demonym            String?
  majorSingle        String
  majorPlural        String
  ISOnum             Int?                @unique
  symbol             String
  symbolNative       String
  minorSingle        String
  minorPlural        String
  ISOdigits          Int
  decimals           Int
  numToBasic         Int?
  conventionSettings ConventionSetting[]
}

model TalentProfile {
  id                String               @id @default(cuid())
  userId            String               @unique
  displayName       String
  tagline           String?
  bio               String?
  profilePictureUrl String?
  websiteUrl        String?
  contactEmail      String?
  skills            String[]             @default([])
  isActive          Boolean              @default(true)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  conventions       ConventionTalent[]
  user              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  media             TalentProfileMedia[]
}

model ConventionTalent {
  id                  String        @id @default(cuid())
  conventionId        String
  talentProfileId     String
  overrideDisplayName String?
  overrideBio         String?
  assignedAt          DateTime      @default(now())
  convention          Convention    @relation(fields: [conventionId], references: [id], onDelete: Cascade)
  talentProfile       TalentProfile @relation(fields: [talentProfileId], references: [id], onDelete: Cascade)

  @@unique([conventionId, talentProfileId])
  @@index([conventionId])
  @@index([talentProfileId])
}

model Tag {
  id          String       @id @default(cuid())
  name        String       @unique
  conventions Convention[] @relation("ConventionTags")
}

model TalentProfileMedia {
  id              String        @id @default(cuid())
  talentProfileId String
  url             String
  type            MediaType
  caption         String?
  order           Int?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  talentProfile   TalentProfile @relation(fields: [talentProfileId], references: [id], onDelete: Cascade)

  @@index([talentProfileId])
}

enum Role {
  USER
  ORGANIZER
  TALENT
  ADMIN
  BRAND_CREATOR
}

enum RequestedRole {
  ORGANIZER
  BRAND_CREATOR
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ConventionStatus {
  DRAFT
  PUBLISHED
  PAST
  CANCELLED
}

enum BrandUserRole {
  OWNER
  MANAGER
}

enum ProfileType {
  USER
  TALENT
  BRAND
}

enum MediaType {
  IMAGE
  VIDEO_LINK
}
